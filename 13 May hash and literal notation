#Hashes are sort of like JavaScript objects or Python dictionaries. If you haven't studied those languages, 
#all you need to know that a hash is a collection of key-value pairs.

#literal notation 
my_hash = { "name" => "Eric",
  "age" => 26,
  "hungry?" => true
}
puts my_hash["name"]
puts my_hash["age"]
puts my_hash["hungry?"]

#new.hash
pets=Hash.new
#output:{}
#capital 
pets["Stevie"] = "cat"
#set the my_hash["name"]="eric" in single hash setting  

#print out every element in the array
friends = ["Milhouse", "Ralph", "Nelson", "Otto"]
family = { "Homer" => "dad",
  "Marge" => "mom",
  "Lisa" => "sister",
  "Maggie" => "sister",
  "Abe" => "grandpa",
  "Santa's Little Helper" => "dog"
}
friends.each { |x| puts "#{x}" }
family.each { |x, y| puts "#{x}: #{y}" }

#print out every elements in language
languages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]
languages.each {|x| puts "#{x}"}

#print out every elements in the sub_array in separate line inside s
s = [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]
s.each do |sub_array|
    sub_array.each do |y|
        puts y
    end
end

#print out evey element with a : and spaee in the hash
secret_identities = {
  "The Batman" => "Bruce Wayne",
  "Superman" => "Clark Kent",
  "Wonder Woman" => "Diana Prince",
  "Freakazoid" => "Dexter Douglas"
}

secret_identities.each do |x,y|
    puts "#{x}: #{y}"
end

#print out every elements int he key column
lunch_order = {
  "Ryan" => "wonton soup",
  "Eric" => "hamburger",
  "Jimmy" => "sandwich",
  "Sasha" => "salad",
  "Cole" => "taco"
}
lunch_order.each do |value, key|
puts "#{key}"
end

matz = { "First name" => "Yukihiro",
  "Last name" => "Matsumoto",
  "Age" => 47,
  "Nationality" => "Japanese",
  "Nickname" => "Matz"
}
matz.each do |key, value|
    puts value,matz[value]
    #the selection code
end
#print out value 

menagerie = { :foxes => 2,
  :giraffe => 1,
  :weezards => 17,
  :elves => 1,
  :canaries => 4,
  :ham => 1
}

puts "string".object_id
#it's how Ruby knows whether two objects are the exact same object.
puts :symbol.object_id

#Symbols make good hash keys for a few reasons:
#They're immutable, meaning they can't be changed once they're created;
#Only one copy of any symbol exists at a given time, so they save memory;
#Symbol-as-keys are faster than strings-as-keys because of the above two reasons.


strings = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]
symbols=[]
strings.each do |s|
    s=s.to_sym
    symbols.push(s)
end

